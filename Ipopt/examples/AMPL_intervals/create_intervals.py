import subprocess
import sys
import random
import matplotlib.pyplot as plt
import argparse
from matplotlib.patches import Rectangle

#parser = argparse.ArgumentParser(description='Run AMPL/IpOpt Intervalization
#parser.add_argument('nloops',nargs=1,type=int)
#parser.add_argument('-bm',nargs=1,type=int)
#parser.add_argument('-s',nargs=1,type=int)
#parser.add_argument('-bv',nargs=1,type=int)

class Interval:
    """Representation of upper and lower bound"""
    def __init__(self, pL, pU):
        assert(len(pL)==len(pU))
        self.pL = pL
        self.pU = pU

    def split(self, idx):
        """
        split an interval along the variable dimension idx (in 0based notation)

        in: parameter index, which is split,
        out: 2 intervals resulting from split
        """
        p1L = []
        p1U = []
        p2L = []
        p2U = []
        for k, (pLv, pUv) in enumerate(zip(self.pL, self.pU)):
            p1L.append(pLv)
            p2U.append(pUv)
            if k==idx:
                v = 0.5*(pLv+pUv)
                p1U.append(v)
                p2L.append(v)
            else:
                p1U.append(pUv)
                p2L.append(pLv)
        return Interval(p1L, p1U), Interval(p2L, p2U)

    def plot(self, dim):
        n = dim[0]
        m = dim[1]
        print self.pL[n]
        rect = Rectangle((self.pL[n], self.pL[m]), self.pU[n]-self.pL[n], self.pU[m]-self.pL[m])
        plt.gca().add_artist(rect)

    def __str__(self):
        s = ''
        for pl, pu in zip(self.pL, self.pU):
            s += '{}, {}\n'.format(pl, pu)
        return s

    def __len__(self):
        return len(self.pL)

class AmplSet:
    """an ampl setup: ampl srcipt and feasible set of intervals"""
    def __init__(self, ampl_script, pLnames, pUnames, pLvalues, pUvalues,bm,sc,bv,idx):
        self.ampl_script = ampl_script
        self.pLnames = pLnames
        self.pUnames = pUnames
        self.pLvalues = pLvalues
        self.pUvalues = pUvalues
        self.intervals = [Interval(pLvalues, pUvalues)]
        self.branchmode = bm
        self.scaling = sc
        self.benefits = bv
        self.q = idx
        self.split_sizes = []
        self.split_ints = []

    def write_include_file(self, filename='intervals.inc'):
        """write current intervallization data into ampl include file"""
        f = open(filename, 'w')
        nint = len(self.intervals)
        f.write('#file generated by sIpOpt intervallization routine script create_intervals.py -- Ben Waldecker Sep 2012\n\n');
        f.write('let nint := {};\n'.format(nint))
        for k,(nameL, nameU) in enumerate(zip(self.pLnames, self.pUnames)):
            f.write('let {{q in 1..{} }} {}[q].intervalID := q;\n'.format(nint, nameL))
            f.write('let {{q in 1..{} }} {}[q].intervalID := q;\n'.format(nint, nameU))
            f.write('let {{q in 1..{} }} {}[q].parameter := {};\n'.format(nint,nameL, k+1))
            f.write('let {{q in 1..{} }} {}[q].parameter := {};\n'.format(nint, nameU, k+1))

        for k, iv in enumerate(self.intervals):
            for nameL, pL, nameU, pU in zip(self.pLnames, iv.pL, self.pUnames, iv.pU):
                if k == 0:
                    f.write('let {}[{}].branchmode := {};\n'.format(nameL,k+1,self.branchmode))
                    f.write('let {}[{}].scaling := {};\n'.format(nameL,k+1,self.scaling))
                    f.write('let {}[{}].benefit_value := {};\n'.format(nameL,k+1,self.benefits))
                f.write('let {}[{}] := {};\n'.format(nameL, k+1, pL))
                f.write('let {}[{}] := {};\n'.format(nameU, k+1, pU))
        f.write('\n\n#end of file');
        f.close()

    def call_ampl(self, output_file_handle=None):
        """"
        one run of ampl

        write inc file and run ampl/ipopt with the specified setup
        """
        self.write_include_file()
        try:
            subprocess.check_call(['ampl', self.ampl_script], stdout=output_file_handle)
        except subprocess.CalledProcessError as e:
            print e
            sys.exit(1)

    def split(self, interval_idx, para_idx):
        """split interval at interval_idx with respect to parameter para_idx"""
        split_interval = self.intervals.pop(interval_idx)
        self.split_ints.append(split_interval);
        if interval_idx < len(self.intervals)-2:
            self.split_sizes.append(2)
        else:
            self.split_sizes.append(1)
        interval1, interval2 = split_interval.split(para_idx)
        self.intervals.extend([interval1, interval2])

    def undo_splits(self, ns=1):
        """undo the last ns splits - default is one"""
        for ir in range(ns):
            for ic in range(self.split_sizes(len(self.split_sizes)-1)):
                self.intervals.pop(len(self.intervals)-1)
            self.intervals.append(self.split_ints.pop(len(self.split_ints)-1))

    def randomize(self,nruns):
        """randomly split nruns times"""
        for ir in range(nruns):
            output_f = open('output'+str(ir)+'.txt', 'w')
            self.call_ampl(output_file_handle=output_f)
            output_f.close()
            nint = random.randint(0,(len(self.intervals)-1))
            npar = random.randint(0,(len(self.pLnames)-1))
            self.split(nint,npar)

    def branch_controlwise(self,nruns):
        """read control sensitivity data and split specified interval """
        for ir in range(nruns):
            # common output tags: bmX with X as branchmode setting, s0/1 for no/scaling, bv0/1 for no/benfit value usage
            output_f = open(str(self.q)+'_lop_bm'+str(self.branchmode)+'_s'+str(self.scaling)+'_bv'+str(self.benefits)+'_'+str(ir)+'.txt', 'w')
            self.call_ampl(output_file_handle=output_f)
            output_f.close()
            branch_file_handle = 'branch_intervals.dat'
            (nint,npar)=self.read_branch(branch_file_handle)
            for (i,p) in zip(nint,npar):
                self.split(i,p)
            self.plot(dim=[0,1], filename=str(self.q)+'_lopplot_bm'+str(self.branchmode)+'_s'+str(self.scaling)+'_bv'+str(self.benefits)+'_'+str(ir)+'.png')

    def read_branch(self,fname):
        """
        read interval data from specified file fname

        in: fname, full name of to be read file
        out: tuple of intervalID(s) and parameter index(es) to be split (0based notation)
        """
        pars = []
        ints = []
        input_f = open(fname)
        for tmp_line in input_f:
            if 'parameter' in tmp_line:
                (int_part,dummy,npar) = tmp_line.partition('parameter: ')
                (dummy1,dummy2,nint) = int_part.partition('intervalID: ')
                pars.append(int(npar)-1)
                ints.append(int(nint)-1)
        input_f.close()
        return (ints,pars)

    def plot(self, dim=[0,1], filename=None):
        plt.figure()
        min0 = min([i.pL[dim[0]] for i in self.intervals])
        min1 = min([i.pL[dim[1]] for i in self.intervals])
        max0 = max([i.pU[dim[0]] for i in self.intervals])
        max1 = max([i.pU[dim[1]] for i in self.intervals])
        plt.gca().set_xlim(min0, max0)
        plt.gca().set_ylim(min1, max1)
        plt.hold(True)
        for i in self.intervals:
            i.plot(dim)
        if filename is not None:
            plt.savefig(filename)

def run():
    for q,(pLvalues,pUvalues) in enumerate([([0.3,0.3],[1.7,1.7])]):#, ([0.2,0.2],[1.8,1.8]),([0.1,0.1],[1.9,1.9])]):

#        for (bm,sc,bv) in [(3,2,2),(2,2,2),(3,2,1)]:
        for bm in [2]:
            for sc in [2]:
                for bv in  [2]:
                    ampl_script = 'autorandomintervals.run'
                    pLnames = ['p1L', 'p2L']
                    pUnames = ['p1U', 'p2U']
 #       pLvalues = [0.3, 0.3]
 #       pUvalues = [1.8, 1.8]
                    info = AmplSet(ampl_script, pLnames, pUnames, pLvalues, pUvalues,bm,sc,bv,q)
    #info.randomize(2)
                    info.branch_controlwise(5)

if __name__=='__main__':
    run()
